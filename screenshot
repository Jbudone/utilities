#!/bin/bash

###################
##
## Screenshot
## Author: JB Braendel (jbudone)
## Website: jbud.me
## Date: Jan, 26. 2013
## 
## Simple screenshot utility
##
## Required Libs
##   libnotify
##
############################################
############################################

# TODO: (list of things probably never to be done)
#	- allow selection of region to screenshot
#	- use a better notification service than libnotify


##################
## OPTIONS
##################

# Settings
############
opt_method="shot"			# method:		which method to run screenshot (shot, burst)
opt_win="-root"				# win:			window selection (window or fullscreen)

def_burstwait=2				# burstwait:	wait time between each screenshot in burst mode
def_notifytimer="-t 800"	# notifyexp:  	NOTE: DOES NOT WORK
							#				  I've added this here in hopes that someday libnotify 
							#				  will fix their expiration timer on notifications, but
							#				  until then this will simply do nothing :(
cwd="/home/`whoami`/Pictures/"


# Getargs arguments
################

# -m method (shot, burst)
#	Shot: single screenshot
#	Burst: burst mode repeatedly takes screenshots until stopped
# -w active window
#	takes a screenshot of the currently active window (NOTE: buggy and not fully tested)
while getopts "wm:" opt; do
	case $opt in
		m)
			case "$OPTARG" in
				shot )
					opt_method="shot"
					;;
				burst )
					# SESSION HANDLING
					##################

					# if burst process already running, then stop it 
					opt_method="burst"
					myname="`echo $0 | sed 's/.*\///'`"				# name of script
					mysearch="^.* /bin/bash.*$myname\(\s\+.*\)*$"	# grep regex search
					joblist="`ps aux`"								# job list
					pidlist="`echo -e "${joblist}" | grep -e "$mysearch" | awk '// {print $2}' | xargs`"
					for pid in $pidlist; do
						# is this process separate from ours?
						if [ "$pid" -ne "$$" ]; then
							# send SIGINT signal to process
							echo "killing ${pid}"
							kill -2 $pid
							exit 1
						fi
					done
					;;
			esac
			;;
		w)
			# select windowid of currently active window
			# NOTE: this has been found to be buggy, and hasn't been fully tested yet!
			opt_win="-id `xprop -root _NET_ACTIVE_WINDOW | awk '{print $NF}'`"
			;;
	esac
done


###############
## SCREENSHOT
###############


shoot() {
	name="$cwd$(date +%Y-%m-%d-%H-%M-%S-%N)"

	xwd $opt_win -out $name.xwd && convert $name.xwd $name.png
	rm $name.xwd
	echo "$name"
}

stop() {
	shooting=false
}

shooting=true
case $opt_method in
	shot )
		shoot
		notify-send 'Screenshot' 'Screenshot made' $def_notifytimer
		exit 1
		;;
	burst )
		notify-send 'Screenshot' 'Beginning burst screenshots!' $def_notifytimer
		trap stop SIGINT # STOP

		# create burst directory
		dirname="${cwd}bursts_$(date +%Y-%m-%d-%k-%m-%S)/"
		mkdir $dirname
		cwd=$dirname

		# loop through burst shots
		while $shooting; do
			# burst shots at regular intervals
			shoot
			sleep $def_burstwait
		done
		notify-send 'Screenshot' 'Finished burst screenshots' $def_notifytimer
		;;
esac
