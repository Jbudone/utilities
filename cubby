#!/bin/bash



###################
##
## Cubby
## Author: JB Braendel (jbudone)
## Website: jbud.me
## Date: Dec, 28 2015
## 
## A file encryption/decryption service for
## folders of files
##
## Required Libs
##	 sqlite3
##   md5sum
##	 gpg
##
############################################
############################################


# TODO
#   > open multiple boxes
#   > add box - what if box already exists? what if box is not a gpg? sqlite unique name/file; what if can't find file?
#   > open/close box - nonexistent box
#   > if closed abruptly, run with --close next time to close all
#   > closing a box that's already closed
#   > opening a box that's already opened
#   > add option for l4z
#	> colour coding / bolding output
#	> safety checking: on error for anything, don't proceed
#	
#	> box options stored in db (eg. l4z + args)
#	> on update - specify what has changed (added/removed/updated which files)

##################
## OPTIONS
##################

# Getargs arguments
################

# ./cubby [OPTION] file..
#
# ./cubby --add name /path/to/file.gpg
# ./cubby --open name
# ./cubby --close [name]
opt_method=
box_name=
extract=0
while getopts "a:o:c:x" opt; do
	case $opt in
		a) opt_method="add"; box_name="$OPTARG" ;;
		o) opt_method="open"; box_name="$OPTARG" ;;
		c) opt_method="close"; box_name="$OPTARG" ;;
		x) extract=1; echo "ALSO EXTRACT PLEASE" ;;
		*) echo "Unknown option $opt" ;;
	esac
done



FOLDER="$HOME/.cubby"
DB="$FOLDER/boxes.db"

# Fancy colouring
bold=$(tput bold)
normal=$(tput sgr0)

create_folder_if_not_exists() {
	if [[ ! -d $FOLDER ]]; then
		mkdir $FOLDER
	fi
}

create_db_if_not_exists() {
	if [[ ! -f $DB ]]; then
		sqlite3 $DB "CREATE TABLE boxes (name TEXT PRIMARY KEY NOT NULL, file TEXT UNIQUE NOT NULL, md5 TEXT NOT NULL);"
	fi
}

create_folder_if_not_exists
create_db_if_not_exists

# rec_md5 [folder]
# uses md5sum on either a file, or recursively on a folder
rec_md5() {
	if [[ -d "$1" ]]; then
		# folder
		echo `find "$1" -type f -exec md5sum "{}" + | xargs | md5sum | awk '{ printf "%s", $1 }'`
	elif [[ -f "$1" ]]; then
		# file
		echo `md5sum "$1" | awk '{ printf "%s", $1 }'`
	else
		return 1
	fi
}

# open_box [box_name] [file] [md5] [rawfile]
open_box() {
	local box_name=$1
	local file=$2
	local md5=$3
	local rawfile=$4

	echo "Opening Box [${bold}$box_name${normal}] ($file) -- $md5: Output (${bold}$rawfile${normal})"

	gpg --output "$HOME/$rawfile" "$file"
}

# close_box [box_name] [file] [md5] [rawfile]
close_box() {

	local box_name=$1
	local file=$2
	local md5=$3
	local rawfile=$4
	local newmd5=$( rec_md5 "$HOME/$rawfile" ) #$( md5sum "$HOME/$rawfile" | awk '{ printf "%s", $1 }' )

	# Check for any changes
	if [ "$md5" != "$newmd5" ]; then
		echo "Box [$box_name] has changed. Saving changes."

		printf "Enter the password for [$box_name]: "
		read -s passphrase

		# Is the passphrase correct?
		tmpfile=$( mktemp )
		gpg --output "$tmpfile" --passphrase "$passphrase" --yes "$file"
		if [[ $? -eq 0 ]]; then
			rm $tmpfile

			if [[ $extract -eq 1 ]]; then
				tar -C "$HOME/$rawfile" -cf "$HOME/$rawfile.tar" .
				rm -r "$HOME/$rawfile"
				rawfile="$rawfile.tar"
				newmd5=$( rec_md5 "$HOME/$rawfile" )
			fi

			gpg --output "$file" --passphrase "$passphrase" -c "$HOME/$rawfile" && sqlite3 $DB "UPDATE boxes SET md5='$newmd5' WHERE name='$box_name';"
			echo "Successfully saved [$box_name]"
		else
			return 1
		fi
	fi

	echo "Removing Box [$box_name] ($rawfile)"
	rm -r "$HOME/$rawfile"
}


case $opt_method in
	add )
		file="${@: -1}"

		# Open box to find its md5
		rawfile=$( basename "$file" .gpg )
		gpg --output "$HOME/$rawfile" "$file"
		if [[ ! $? -eq 0 ]]; then
			echo "Error"
			exit 1
		fi

		md5=$( rec_md5r "$HOME/$rawfile" ) #$( md5sum "$HOME/$rawfile" | awk '{ printf "%s", $1 }' )
		rm "$HOME/$rawfile"

		# Insert box into db
		sqlite3 $DB "INSERT INTO boxes (name,file,md5) values ('$box_name','$file','$md5');"
		if [[ ! $? -eq 0 ]]; then
			echo "Error inserting box"
			exit
		fi
		;;
	open )

		# Fetch box from db
		output=$( sqlite3 $DB "SELECT file, md5 FROM boxes WHERE name='$box_name';" )
		if [[ ! $? -eq 0 ]]; then
			echo "Error selecting boxes for opening"
			exit
		elif [[ -z $output ]]; then
			echo "Box $box_name was not found"
			exit
		fi

		# Find file/md5 params for box
		file=$( echo "$output" | awk 'BEGIN { FS="|" }; { printf "%s", $1 }' )
		md5=$( echo "$output" | awk 'BEGIN { FS="|" }; { printf "%s", $2 }' )
		rawfile=$( basename "$file" .gpg )

		# Open box
		open_box $box_name "$file" $md5 $rawfile
		if [[ ! $? -eq 0 ]]; then
			echo "Nope!"
			exit 1
		fi

		# Extraction
		if [[ $extract -eq 1 ]]; then
			mkdir "$HOME/$box_name"
			tar xf "$HOME/$rawfile" --directory "$HOME/$box_name"
			echo "Extracting $HOME/$rawfile to $HOME/$box_name"
			rm "$HOME/$rawfile"

			rawfile=$box_name
			md5=$( rec_md5 "$HOME/$rawfile" )
		fi

		read -p "Press any key when you are finished.."
		close_box $box_name "$file" $md5 $rawfile
		;;
	close )

		# Fetch box from db
		output=$( sqlite3 $DB "SELECT file, md5 FROM boxes WHERE name='$box_name';" )
		if [[ ! $? -eq 0 ]]; then
			echo "Error selecting boxes for closing"
			exit
		elif [[ -z $output ]]; then
			echo "Box $box_name was not found"
			exit
		fi

		# Find file/md5 params for box
		file=$( echo "$output" | awk 'BEGIN { FS="|" }; { printf "%s", $1 }' )
		md5=$( echo "$output" | awk 'BEGIN { FS="|" }; { printf "%s", $2 }' )
		rawfile=$( basename "$file" .gpg )

		close_box $box_name "$file" $md5 $rawfile
		;;
esac
